import os
import sys
from datetime import datetime
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import joblib


def normalize_name(name):
    return name.strip().lower()


def get_default_summary_path(input_path):
    base_name = os.path.splitext(os.path.basename(input_path))[0]
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    return os.path.join(log_dir, f"{base_name}__{ts}.txt")


def train_model(args):
    # 1. –ó—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ
    df = pd.read_csv(args.input)
    colnames = [normalize_name(c) for c in df.columns]

    # 2. –ó–Ω–∞–π—Ç–∏ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è (–∫–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞ label)
    coord_names = ["x", "y", "z"]
    label_name = "label"
    coord_fields = []
    for cname in coord_names:
        found = [col for col in df.columns if normalize_name(col) == cname]
        if not found:
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ {cname.upper()} —É CSV!", file=sys.stderr)
            sys.exit(1)
        coord_fields.append(found[0])
    label_fields = [col for col in df.columns if normalize_name(col) == label_name]
    if not label_fields:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ label —É CSV!", file=sys.stderr)
        sys.exit(1)
    label_field = label_fields[0]

    # 3. –°–ø–∏—Å–æ–∫ —Ñ—ñ—á: –∞–±–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ, –∞–±–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–¥–∞–Ω—ñ —á–µ—Ä–µ–∑ --features
    exclude = set(coord_fields + [label_field])
    if args.features:
        # –î–æ–∑–≤–æ–ª—è—î–º–æ —è–∫ –∫–æ–º–æ—é, —Ç–∞–∫ —ñ –¥–µ–∫—ñ–ª—å–∫–∞ --features
        raw_features = []
        for f in args.features:
            raw_features += [s.strip() for s in f.split(',')]
        feature_fields = []
        for f in raw_features:
            found = [col for col in df.columns if normalize_name(col) == normalize_name(f)]
            if not found:
                print(f"‚ùå –ü–æ–ª–µ '{f}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É CSV!", file=sys.stderr)
                sys.exit(1)
            feature_fields.append(found[0])
    else:
        feature_fields = [c for c in df.columns if c not in exclude and pd.api.types.is_numeric_dtype(df[c])]
    if not feature_fields:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —á–∏—Å–ª–æ–≤–æ—ó —Ñ—ñ—á—ñ —É CSV!", file=sys.stderr)
        sys.exit(1)

    print(f"\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –æ–∑–Ω–∞–∫–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: {', '.join(feature_fields)}")

    # 4. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è X, y
    X = df[feature_fields]  # <-- –∑–∞–ª–∏—à–∞—î–º–æ DataFrame
    y = df[label_field]

    # 5. Train/test split (80/20)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    # 6. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ (RandomForest)
    clf = RandomForestClassifier(
        n_estimators=100,
        n_jobs=-1,
        random_state=42,
        class_weight='balanced'
    )
    clf.fit(X_train, y_train)

    # 7. –û—Ü—ñ–Ω–∫–∞
    y_pred = clf.predict(X_test)
    class_report = classification_report(y_test, y_pred, digits=3)
    conf_mat = confusion_matrix(y_test, y_pred)

    print("\n--- –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∑–≤—ñ—Ç (test) ---")
    print(class_report)

    print("\n–ú–∞—Ç—Ä–∏—Ü—è –∑–º—ñ—à—É–≤–∞–Ω–Ω—è:")
    print(conf_mat)

    importances = clf.feature_importances_
    feat_imp_str = "\n–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫:\n" + "\n".join(
        f"{name}: {imp:.3f}" for name, imp in sorted(zip(feature_fields, importances), key=lambda x: -x[1])
    )
    print(feat_imp_str)

    print(f"\n–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —É: {args.output}")
    joblib.dump(clf, args.output)

    # 8. Summary log, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∞–±–æ —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ç–æ auto-path —É logs/
    summary_path = args.summary or get_default_summary_path(args.input)
    with open(summary_path, "a") as f:
        f.write(f"\n\n==== –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {datetime.now()} ====\n")
        f.write(f"–í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: {args.input}\n")
        f.write(f"–û–∑–Ω–∞–∫–∏: {', '.join(feature_fields)}\n")
        f.write(f"–í–∏—Ö—ñ–¥–Ω–∞ –º–æ–¥–µ–ª—å: {args.output}\n\n")
        f.write("--- –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∑–≤—ñ—Ç (test) ---\n")
        f.write(class_report + "\n\n")
        f.write("–ú–∞—Ç—Ä–∏—Ü—è –∑–º—ñ—à—É–≤–∞–Ω–Ω—è:\n")
        f.write(str(conf_mat) + "\n")
        f.write(feat_imp_str + "\n")
        f.write("=" * 40 + "\n")
    print(f"\nüìù –õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {summary_path}")
